// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QRadioLink.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QRadioLink.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QRadioLink {

namespace {

const ::google::protobuf::Descriptor* Parameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinConference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinConference_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveConference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveConference_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QRadioLink_2eproto() {
  protobuf_AddDesc_QRadioLink_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QRadioLink.proto");
  GOOGLE_CHECK(file != NULL);
  Parameters_descriptor_ = file->message_type(0);
  static const int Parameters_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, in_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, caller_id_),
  };
  Parameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parameters_descriptor_,
      Parameters::default_instance_,
      Parameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameters));
  JoinConference_descriptor_ = file->message_type(1);
  static const int JoinConference_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinConference, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinConference, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinConference, caller_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinConference, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinConference, server_port_),
  };
  JoinConference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinConference_descriptor_,
      JoinConference::default_instance_,
      JoinConference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinConference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinConference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinConference));
  LeaveConference_descriptor_ = file->message_type(2);
  static const int LeaveConference_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveConference, leave_),
  };
  LeaveConference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveConference_descriptor_,
      LeaveConference::default_instance_,
      LeaveConference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveConference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveConference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveConference));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QRadioLink_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameters_descriptor_, &Parameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinConference_descriptor_, &JoinConference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveConference_descriptor_, &LeaveConference::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QRadioLink_2eproto() {
  delete Parameters::default_instance_;
  delete Parameters_reflection_;
  delete JoinConference::default_instance_;
  delete JoinConference_reflection_;
  delete LeaveConference::default_instance_;
  delete LeaveConference_reflection_;
}

void protobuf_AddDesc_QRadioLink_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020QRadioLink.proto\022\nQRadioLink\"X\n\nParame"
    "ters\022\022\n\nstation_id\030\001 \002(\r\022\017\n\007in_call\030\002 \001("
    "\r\022\022\n\nchannel_id\030\003 \001(\r\022\021\n\tcaller_id\030\004 \001(\r"
    "\"r\n\016JoinConference\022\021\n\tserver_id\030\001 \002(\r\022\022\n"
    "\nchannel_id\030\002 \002(\r\022\021\n\tcaller_id\030\003 \002(\r\022\021\n\t"
    "server_ip\030\004 \001(\t\022\023\n\013server_port\030\005 \001(\r\" \n\017"
    "LeaveConference\022\r\n\005leave\030\001 \002(\010B\002H\001", 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QRadioLink.proto", &protobuf_RegisterTypes);
  Parameters::default_instance_ = new Parameters();
  JoinConference::default_instance_ = new JoinConference();
  LeaveConference::default_instance_ = new LeaveConference();
  Parameters::default_instance_->InitAsDefaultInstance();
  JoinConference::default_instance_->InitAsDefaultInstance();
  LeaveConference::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QRadioLink_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QRadioLink_2eproto {
  StaticDescriptorInitializer_QRadioLink_2eproto() {
    protobuf_AddDesc_QRadioLink_2eproto();
  }
} static_descriptor_initializer_QRadioLink_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Parameters::kStationIdFieldNumber;
const int Parameters::kInCallFieldNumber;
const int Parameters::kChannelIdFieldNumber;
const int Parameters::kCallerIdFieldNumber;
#endif  // !_MSC_VER

Parameters::Parameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRadioLink.Parameters)
}

void Parameters::InitAsDefaultInstance() {
}

Parameters::Parameters(const Parameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRadioLink.Parameters)
}

void Parameters::SharedCtor() {
  _cached_size_ = 0;
  station_id_ = 0u;
  in_call_ = 0u;
  channel_id_ = 0u;
  caller_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:QRadioLink.Parameters)
  SharedDtor();
}

void Parameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameters_descriptor_;
}

const Parameters& Parameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QRadioLink_2eproto();
  return *default_instance_;
}

Parameters* Parameters::default_instance_ = NULL;

Parameters* Parameters::New() const {
  return new Parameters;
}

void Parameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Parameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(station_id_, caller_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRadioLink.Parameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 station_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &station_id_)));
          set_has_station_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_in_call;
        break;
      }

      // optional uint32 in_call = 2;
      case 2: {
        if (tag == 16) {
         parse_in_call:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_call_)));
          set_has_in_call();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_caller_id;
        break;
      }

      // optional uint32 caller_id = 4;
      case 4: {
        if (tag == 32) {
         parse_caller_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caller_id_)));
          set_has_caller_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRadioLink.Parameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRadioLink.Parameters)
  return false;
#undef DO_
}

void Parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRadioLink.Parameters)
  // required uint32 station_id = 1;
  if (has_station_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->station_id(), output);
  }

  // optional uint32 in_call = 2;
  if (has_in_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->in_call(), output);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }

  // optional uint32 caller_id = 4;
  if (has_caller_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->caller_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRadioLink.Parameters)
}

::google::protobuf::uint8* Parameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRadioLink.Parameters)
  // required uint32 station_id = 1;
  if (has_station_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->station_id(), target);
  }

  // optional uint32 in_call = 2;
  if (has_in_call()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->in_call(), target);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }

  // optional uint32 caller_id = 4;
  if (has_caller_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->caller_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRadioLink.Parameters)
  return target;
}

int Parameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 station_id = 1;
    if (has_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->station_id());
    }

    // optional uint32 in_call = 2;
    if (has_in_call()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_call());
    }

    // optional uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 caller_id = 4;
    if (has_caller_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->caller_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameters::MergeFrom(const Parameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_station_id()) {
      set_station_id(from.station_id());
    }
    if (from.has_in_call()) {
      set_in_call(from.in_call());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_caller_id()) {
      set_caller_id(from.caller_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameters::CopyFrom(const Parameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Parameters::Swap(Parameters* other) {
  if (other != this) {
    std::swap(station_id_, other->station_id_);
    std::swap(in_call_, other->in_call_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(caller_id_, other->caller_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameters_descriptor_;
  metadata.reflection = Parameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinConference::kServerIdFieldNumber;
const int JoinConference::kChannelIdFieldNumber;
const int JoinConference::kCallerIdFieldNumber;
const int JoinConference::kServerIpFieldNumber;
const int JoinConference::kServerPortFieldNumber;
#endif  // !_MSC_VER

JoinConference::JoinConference()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRadioLink.JoinConference)
}

void JoinConference::InitAsDefaultInstance() {
}

JoinConference::JoinConference(const JoinConference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRadioLink.JoinConference)
}

void JoinConference::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = 0u;
  channel_id_ = 0u;
  caller_id_ = 0u;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinConference::~JoinConference() {
  // @@protoc_insertion_point(destructor:QRadioLink.JoinConference)
  SharedDtor();
}

void JoinConference::SharedDtor() {
  if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_ip_;
  }
  if (this != default_instance_) {
  }
}

void JoinConference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinConference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinConference_descriptor_;
}

const JoinConference& JoinConference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QRadioLink_2eproto();
  return *default_instance_;
}

JoinConference* JoinConference::default_instance_ = NULL;

JoinConference* JoinConference::New() const {
  return new JoinConference;
}

void JoinConference::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinConference*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(server_id_, channel_id_);
    ZR_(caller_id_, server_port_);
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinConference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRadioLink.JoinConference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // required uint32 channel_id = 2;
      case 2: {
        if (tag == 16) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_caller_id;
        break;
      }

      // required uint32 caller_id = 3;
      case 3: {
        if (tag == 24) {
         parse_caller_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caller_id_)));
          set_has_caller_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_server_ip;
        break;
      }

      // optional string server_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 5;
      case 5: {
        if (tag == 40) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRadioLink.JoinConference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRadioLink.JoinConference)
  return false;
#undef DO_
}

void JoinConference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRadioLink.JoinConference)
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // required uint32 caller_id = 3;
  if (has_caller_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->caller_id(), output);
  }

  // optional string server_ip = 4;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_ip(), output);
  }

  // optional uint32 server_port = 5;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRadioLink.JoinConference)
}

::google::protobuf::uint8* JoinConference::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRadioLink.JoinConference)
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // required uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // required uint32 caller_id = 3;
  if (has_caller_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->caller_id(), target);
  }

  // optional string server_ip = 4;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_ip(), target);
  }

  // optional uint32 server_port = 5;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRadioLink.JoinConference)
  return target;
}

int JoinConference::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // required uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // required uint32 caller_id = 3;
    if (has_caller_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->caller_id());
    }

    // optional string server_ip = 4;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }

    // optional uint32 server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinConference::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinConference* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinConference*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinConference::MergeFrom(const JoinConference& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_caller_id()) {
      set_caller_id(from.caller_id());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinConference::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinConference::CopyFrom(const JoinConference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinConference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void JoinConference::Swap(JoinConference* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(caller_id_, other->caller_id_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinConference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinConference_descriptor_;
  metadata.reflection = JoinConference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveConference::kLeaveFieldNumber;
#endif  // !_MSC_VER

LeaveConference::LeaveConference()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QRadioLink.LeaveConference)
}

void LeaveConference::InitAsDefaultInstance() {
}

LeaveConference::LeaveConference(const LeaveConference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QRadioLink.LeaveConference)
}

void LeaveConference::SharedCtor() {
  _cached_size_ = 0;
  leave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveConference::~LeaveConference() {
  // @@protoc_insertion_point(destructor:QRadioLink.LeaveConference)
  SharedDtor();
}

void LeaveConference::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveConference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveConference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveConference_descriptor_;
}

const LeaveConference& LeaveConference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QRadioLink_2eproto();
  return *default_instance_;
}

LeaveConference* LeaveConference::default_instance_ = NULL;

LeaveConference* LeaveConference::New() const {
  return new LeaveConference;
}

void LeaveConference::Clear() {
  leave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveConference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QRadioLink.LeaveConference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool leave = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leave_)));
          set_has_leave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QRadioLink.LeaveConference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QRadioLink.LeaveConference)
  return false;
#undef DO_
}

void LeaveConference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QRadioLink.LeaveConference)
  // required bool leave = 1;
  if (has_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->leave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QRadioLink.LeaveConference)
}

::google::protobuf::uint8* LeaveConference::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QRadioLink.LeaveConference)
  // required bool leave = 1;
  if (has_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->leave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QRadioLink.LeaveConference)
  return target;
}

int LeaveConference::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool leave = 1;
    if (has_leave()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveConference::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveConference* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveConference*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveConference::MergeFrom(const LeaveConference& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leave()) {
      set_leave(from.leave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveConference::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveConference::CopyFrom(const LeaveConference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveConference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LeaveConference::Swap(LeaveConference* other) {
  if (other != this) {
    std::swap(leave_, other->leave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveConference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveConference_descriptor_;
  metadata.reflection = LeaveConference_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QRadioLink

// @@protoc_insertion_point(global_scope)
