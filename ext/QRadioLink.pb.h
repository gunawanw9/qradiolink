// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QRadioLink.proto

#ifndef PROTOBUF_QRadioLink_2eproto__INCLUDED
#define PROTOBUF_QRadioLink_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace QRadioLink {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_QRadioLink_2eproto();
void protobuf_AssignDesc_QRadioLink_2eproto();
void protobuf_ShutdownFile_QRadioLink_2eproto();

class Parameters;
class JoinConference;
class LeaveConference;

// ===================================================================

class Parameters : public ::google::protobuf::Message {
 public:
  Parameters();
  virtual ~Parameters();

  Parameters(const Parameters& from);

  inline Parameters& operator=(const Parameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameters& default_instance();

  void Swap(Parameters* other);

  // implements Message ----------------------------------------------

  Parameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Parameters& from);
  void MergeFrom(const Parameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 station_id = 1;
  inline bool has_station_id() const;
  inline void clear_station_id();
  static const int kStationIdFieldNumber = 1;
  inline ::google::protobuf::uint32 station_id() const;
  inline void set_station_id(::google::protobuf::uint32 value);

  // optional uint32 in_call = 2;
  inline bool has_in_call() const;
  inline void clear_in_call();
  static const int kInCallFieldNumber = 2;
  inline ::google::protobuf::uint32 in_call() const;
  inline void set_in_call(::google::protobuf::uint32 value);

  // optional uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional uint32 caller_id = 4;
  inline bool has_caller_id() const;
  inline void clear_caller_id();
  static const int kCallerIdFieldNumber = 4;
  inline ::google::protobuf::uint32 caller_id() const;
  inline void set_caller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:QRadioLink.Parameters)
 private:
  inline void set_has_station_id();
  inline void clear_has_station_id();
  inline void set_has_in_call();
  inline void clear_has_in_call();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_caller_id();
  inline void clear_has_caller_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 station_id_;
  ::google::protobuf::uint32 in_call_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 caller_id_;
  friend void  protobuf_AddDesc_QRadioLink_2eproto();
  friend void protobuf_AssignDesc_QRadioLink_2eproto();
  friend void protobuf_ShutdownFile_QRadioLink_2eproto();

  void InitAsDefaultInstance();
  static Parameters* default_instance_;
};
// -------------------------------------------------------------------

class JoinConference : public ::google::protobuf::Message {
 public:
  JoinConference();
  virtual ~JoinConference();

  JoinConference(const JoinConference& from);

  inline JoinConference& operator=(const JoinConference& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinConference& default_instance();

  void Swap(JoinConference* other);

  // implements Message ----------------------------------------------

  JoinConference* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinConference& from);
  void MergeFrom(const JoinConference& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // required uint32 channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // required uint32 caller_id = 3;
  inline bool has_caller_id() const;
  inline void clear_caller_id();
  static const int kCallerIdFieldNumber = 3;
  inline ::google::protobuf::uint32 caller_id() const;
  inline void set_caller_id(::google::protobuf::uint32 value);

  // optional string server_ip = 4;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 4;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  inline void set_allocated_server_ip(::std::string* server_ip);

  // optional uint32 server_port = 5;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 5;
  inline ::google::protobuf::uint32 server_port() const;
  inline void set_server_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:QRadioLink.JoinConference)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_caller_id();
  inline void clear_has_caller_id();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_port();
  inline void clear_has_server_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 channel_id_;
  ::std::string* server_ip_;
  ::google::protobuf::uint32 caller_id_;
  ::google::protobuf::uint32 server_port_;
  friend void  protobuf_AddDesc_QRadioLink_2eproto();
  friend void protobuf_AssignDesc_QRadioLink_2eproto();
  friend void protobuf_ShutdownFile_QRadioLink_2eproto();

  void InitAsDefaultInstance();
  static JoinConference* default_instance_;
};
// -------------------------------------------------------------------

class LeaveConference : public ::google::protobuf::Message {
 public:
  LeaveConference();
  virtual ~LeaveConference();

  LeaveConference(const LeaveConference& from);

  inline LeaveConference& operator=(const LeaveConference& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveConference& default_instance();

  void Swap(LeaveConference* other);

  // implements Message ----------------------------------------------

  LeaveConference* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveConference& from);
  void MergeFrom(const LeaveConference& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool leave = 1;
  inline bool has_leave() const;
  inline void clear_leave();
  static const int kLeaveFieldNumber = 1;
  inline bool leave() const;
  inline void set_leave(bool value);

  // @@protoc_insertion_point(class_scope:QRadioLink.LeaveConference)
 private:
  inline void set_has_leave();
  inline void clear_has_leave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool leave_;
  friend void  protobuf_AddDesc_QRadioLink_2eproto();
  friend void protobuf_AssignDesc_QRadioLink_2eproto();
  friend void protobuf_ShutdownFile_QRadioLink_2eproto();

  void InitAsDefaultInstance();
  static LeaveConference* default_instance_;
};
// ===================================================================


// ===================================================================

// Parameters

// required uint32 station_id = 1;
inline bool Parameters::has_station_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameters::set_has_station_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameters::clear_has_station_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameters::clear_station_id() {
  station_id_ = 0u;
  clear_has_station_id();
}
inline ::google::protobuf::uint32 Parameters::station_id() const {
  // @@protoc_insertion_point(field_get:QRadioLink.Parameters.station_id)
  return station_id_;
}
inline void Parameters::set_station_id(::google::protobuf::uint32 value) {
  set_has_station_id();
  station_id_ = value;
  // @@protoc_insertion_point(field_set:QRadioLink.Parameters.station_id)
}

// optional uint32 in_call = 2;
inline bool Parameters::has_in_call() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameters::set_has_in_call() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parameters::clear_has_in_call() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parameters::clear_in_call() {
  in_call_ = 0u;
  clear_has_in_call();
}
inline ::google::protobuf::uint32 Parameters::in_call() const {
  // @@protoc_insertion_point(field_get:QRadioLink.Parameters.in_call)
  return in_call_;
}
inline void Parameters::set_in_call(::google::protobuf::uint32 value) {
  set_has_in_call();
  in_call_ = value;
  // @@protoc_insertion_point(field_set:QRadioLink.Parameters.in_call)
}

// optional uint32 channel_id = 3;
inline bool Parameters::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parameters::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parameters::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parameters::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 Parameters::channel_id() const {
  // @@protoc_insertion_point(field_get:QRadioLink.Parameters.channel_id)
  return channel_id_;
}
inline void Parameters::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:QRadioLink.Parameters.channel_id)
}

// optional uint32 caller_id = 4;
inline bool Parameters::has_caller_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Parameters::set_has_caller_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Parameters::clear_has_caller_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Parameters::clear_caller_id() {
  caller_id_ = 0u;
  clear_has_caller_id();
}
inline ::google::protobuf::uint32 Parameters::caller_id() const {
  // @@protoc_insertion_point(field_get:QRadioLink.Parameters.caller_id)
  return caller_id_;
}
inline void Parameters::set_caller_id(::google::protobuf::uint32 value) {
  set_has_caller_id();
  caller_id_ = value;
  // @@protoc_insertion_point(field_set:QRadioLink.Parameters.caller_id)
}

// -------------------------------------------------------------------

// JoinConference

// required uint32 server_id = 1;
inline bool JoinConference::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinConference::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinConference::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinConference::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 JoinConference::server_id() const {
  // @@protoc_insertion_point(field_get:QRadioLink.JoinConference.server_id)
  return server_id_;
}
inline void JoinConference::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:QRadioLink.JoinConference.server_id)
}

// required uint32 channel_id = 2;
inline bool JoinConference::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinConference::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinConference::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinConference::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 JoinConference::channel_id() const {
  // @@protoc_insertion_point(field_get:QRadioLink.JoinConference.channel_id)
  return channel_id_;
}
inline void JoinConference::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:QRadioLink.JoinConference.channel_id)
}

// required uint32 caller_id = 3;
inline bool JoinConference::has_caller_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinConference::set_has_caller_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinConference::clear_has_caller_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinConference::clear_caller_id() {
  caller_id_ = 0u;
  clear_has_caller_id();
}
inline ::google::protobuf::uint32 JoinConference::caller_id() const {
  // @@protoc_insertion_point(field_get:QRadioLink.JoinConference.caller_id)
  return caller_id_;
}
inline void JoinConference::set_caller_id(::google::protobuf::uint32 value) {
  set_has_caller_id();
  caller_id_ = value;
  // @@protoc_insertion_point(field_set:QRadioLink.JoinConference.caller_id)
}

// optional string server_ip = 4;
inline bool JoinConference::has_server_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinConference::set_has_server_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoinConference::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoinConference::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& JoinConference::server_ip() const {
  // @@protoc_insertion_point(field_get:QRadioLink.JoinConference.server_ip)
  return *server_ip_;
}
inline void JoinConference::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
  // @@protoc_insertion_point(field_set:QRadioLink.JoinConference.server_ip)
}
inline void JoinConference::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:QRadioLink.JoinConference.server_ip)
}
inline void JoinConference::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QRadioLink.JoinConference.server_ip)
}
inline ::std::string* JoinConference::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:QRadioLink.JoinConference.server_ip)
  return server_ip_;
}
inline ::std::string* JoinConference::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JoinConference::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_ip_;
  }
  if (server_ip) {
    set_has_server_ip();
    server_ip_ = server_ip;
  } else {
    clear_has_server_ip();
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:QRadioLink.JoinConference.server_ip)
}

// optional uint32 server_port = 5;
inline bool JoinConference::has_server_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JoinConference::set_has_server_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JoinConference::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JoinConference::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
inline ::google::protobuf::uint32 JoinConference::server_port() const {
  // @@protoc_insertion_point(field_get:QRadioLink.JoinConference.server_port)
  return server_port_;
}
inline void JoinConference::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:QRadioLink.JoinConference.server_port)
}

// -------------------------------------------------------------------

// LeaveConference

// required bool leave = 1;
inline bool LeaveConference::has_leave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveConference::set_has_leave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveConference::clear_has_leave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveConference::clear_leave() {
  leave_ = false;
  clear_has_leave();
}
inline bool LeaveConference::leave() const {
  // @@protoc_insertion_point(field_get:QRadioLink.LeaveConference.leave)
  return leave_;
}
inline void LeaveConference::set_leave(bool value) {
  set_has_leave();
  leave_ = value;
  // @@protoc_insertion_point(field_set:QRadioLink.LeaveConference.leave)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QRadioLink

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QRadioLink_2eproto__INCLUDED
